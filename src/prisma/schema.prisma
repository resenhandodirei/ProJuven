generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ===== ENUMS =====
 */

enum TipoDePerfilEnum {
  ADMIN
  DEFENSOR
  PSICOSSOCIAL
  SERVIDOR
  ESTAGIARIO
}

/**
 * ===== MODELS =====
 */

/**
 * Usuários / contas de login
 */
model Login {
  id           Int              @id @default(autoincrement())
  nome         String           @db.VarChar(100)
  genero       String?          @db.VarChar(20)
  tipoDePerfil TipoDePerfilEnum @map("tipo_de_perfil")
  email        String           @unique @db.VarChar(255)
  senha        String           @db.VarChar(255)

  fichas              Ficha[]                  @relation("CriadorFicha")
  prontuariosJuridico ProntuarioJuridico[]     @relation("CriadorProntuarioJuridico")
  prontuariosPsico    ProntuarioPsicossocial[] @relation("CriadorProntuarioPsicossocial")

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("login")
}

/**
 * Ficha com campos obrigatórios e opcionais, 
 * respeitando as regras de quem cria (Servidor ou outras personas).
 */ 

model Ficha {
  id               String   @id @default(uuid())
  nomeAtendido     String   @map("nome_atendido")
  nomeFamiliar     String?  @map("nome_familiar") // obrigatório só p/ algumas personas
  cpf              String?  @map("cpf")
  rg               String?  @map("rg")
  dataNascimento   DateTime? @map("data_nascimento")

  qtdProcesso      Int?     @map("qtd_processo")
  numeroProcesso   String?  @map("numero_processo") // pode ser 1 ou vários
  varaProcesso     String?  @map("vara_processo")   // ex: "5ª Vara"
  
  telefonesContato String[] @map("telefones_contato") // servidor precisa registrar vários
  nomeResponsavel  String?  @map("nome_responsavel")
  documentoResponsavel String? @map("documento_responsavel") // cpf ou rg do responsável
  endereco         String?  @map("endereco")

  idUsuarioCriador Int      @map("id_usuario_criador") 
  criador          Login    @relation("CriadorFicha", fields: [idUsuarioCriador], references: [id])

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  ProntuarioJuridico     ProntuarioJuridico[]
  ProntuarioPsicossocial ProntuarioPsicossocial[]

  @@map("ficha")
}

/**
 * ===== PRONTUÁRIOS (estrutura básica pronta para expansão) =====
 */

// ENUMS
enum PessoaQueAtendeu {
  DEFENSOR_RUBENS
  DEFENSORA_LUCIANA
  DEFENSORA_ANDREIA
  ASSESSOR_PEDRO
  ESTAGIARIO_ALEX
  ESTAGIARIO_ALAN
  ESTAGIARIA_GABRIELLE
  ESTAGIARIO_GUSTAVO
  ESTAGIARIA_LARISSA
  ESTAGIARIO_MARCOS
  ESTAGIARIA_RAYANE
  ESTAGIARIA_THAYNA
}

enum DefensorResponsavel {
  DEFENSOR_RUBENS
  DEFENSORA_LUCIANA
  DEFENSORA_ANDREIA
}

enum TipoCrime {
  PATRIMONIO
  VIDA
  HONRA
  DROGAS
  ARMAS
  SEXUAL
  OUTROS
}

enum Parentesco {
  MAE
  PAI
  IRMA
  IRMAO
  TIOS
  AVOS
  NORA
  CUNHADO
  OUTROS
}

// MODELS
model Jovem {
  id             Int       @id @default(autoincrement())
  nome           String
  dataNascimento DateTime
  criadoEm       DateTime  @default(now())
  atualizadoEm   DateTime  @updatedAt
  processos      Processo[]
  familiares     Familiar[]
}

model Familiar {
  id                  Int        @id @default(autoincrement())
  jovemId             Int
  jovem               Jovem      @relation(fields: [jovemId], references: [id], onDelete: Cascade)
  nome                String
  parentesco          Parentesco
  responsavelPrincipal Boolean   @default(false)
  contatos            ContatoFamiliar[]
}

model ContatoFamiliar {
  id          Int        @id @default(autoincrement())
  familiarId  Int
  familiar    Familiar   @relation(fields: [familiarId], references: [id], onDelete: Cascade)
  telefone    String
  parentesco  Parentesco?
}

model Processo {
  id          Int        @id @default(autoincrement())
  jovemId     Int
  jovem       Jovem      @relation(fields: [jovemId], references: [id], onDelete: Cascade)
  numero      String
  tipoCrime   TipoCrime
  descricao   String?
  criadoEm    DateTime   @default(now())
  atendimentos Atendimento[]
}

model Atendimento {
  id                 Int                 @id @default(autoincrement())
  processoId         Int
  processo           Processo            @relation(fields: [processoId], references: [id], onDelete: Cascade)
  pessoaQueAtendeu   PessoaQueAtendeu
  defensorResponsavel DefensorResponsavel
  criadoEm           DateTime            @default(now())
  atualizadoEm       DateTime            @updatedAt
}

/**
 * ===== PRONTUÁRIOS (ESTRUTURA INICIAL) =====
 */

model ProntuarioJuridico {
  id String @id @default(uuid())

  idUsuarioCriador Int   @map("id_usuario_criador")
  criador          Login @relation("CriadorProntuarioJuridico", fields: [idUsuarioCriador], references: [id])

  // ligação opcional com ficha
  fichaId String?
  ficha   Ficha?  @relation(fields: [fichaId], references: [id])

  // campos básicos iniciais (adicione mais conforme a checklist)
  pessoaQueAtendeu String?   @map("pessoa_que_atendeu")
  numeroProcesso   String?   @map("numero_processo")
  nomeJovem        String?   @map("nome_jovem")
  cpf              String?   @map("cpf")
  dataNascimento   DateTime? @map("data_nascimento")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("prontuario_juridico")
}

model ProntuarioPsicossocial {
  id String @id @default(uuid())

  idUsuarioCriador Int   @map("id_usuario_criador")
  criador          Login @relation("CriadorProntuarioPsicossocial", fields: [idUsuarioCriador], references: [id])

  fichaId String?
  ficha   Ficha?  @relation(fields: [fichaId], references: [id])

  // campos iniciais
  avaliacaoInicial  String? @map("avaliacao_inicial")
  historicoFamiliar String? @map("historico_familiar")
  observacoes       String? @map("observacoes")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("prontuario_psicossocial")
}
